/* KILL BUTTON * */
/* DEFINE BUTTON "Reset DK580" , "include ../../../misc/sysram_case23.ini" */
RESET
E long 0x50000012 = 0xa4
E long 0x50003308 = 0x2e
LOAD %L
SP = _RDWORD (0x20000000)
$ = _RDWORD (0x20000004)




FUNC void disp_memlog(void) 
{
    int idx;
    unsigned int min_delta;

    exec("log > Memlog.log");
    
    printf("\n\n*** Memory Logging Results ***\n\n");
    
    printf(">>> ENV HEAP <<<\n");
    printf("Used size in this HEAP  : %4d (current) - %4d (maximum)\n", mem_log[0].used_sz, mem_log[0].max_used_sz);
    printf("Used size in other HEAPs: %4d (current) - %4d (maximum)\n\n", mem_log[0].used_other_sz, mem_log[0].max_used_other_sz);
    
    printf(">>> DB HEAP <<<\n");
    printf("Used size in this HEAP  : %4d (current) - %4d (maximum)\n", mem_log[1].used_sz, mem_log[1].max_used_sz);
    printf("Used size in other HEAPs: %4d (current) - %4d (maximum)\n\n", mem_log[1].used_other_sz, mem_log[1].max_used_other_sz);
    
    printf(">>> MSG HEAP <<<\n");
    printf("Used size in this HEAP  : %4d (current) - %4d (maximum)\n", mem_log[2].used_sz, mem_log[2].max_used_sz);
    printf("Used size in other HEAPs: %4d (current) - %4d (maximum)\n\n", mem_log[2].used_other_sz, mem_log[2].max_used_other_sz);
    
    printf(">>> Non-Ret HEAP <<<\n");
    printf("Used size in this HEAP  : %4d (current) - %4d (maximum)\n", mem_log[3].used_sz, mem_log[3].max_used_sz);
    printf("Used size in other HEAPs: %4d (current) - %4d (maximum)\n\n", mem_log[3].used_other_sz, mem_log[3].max_used_other_sz);
    
    exec("log off");
} //disp_memlog() ends



FUNC void displayvalues(void) 
{
  int idx;
  unsigned int min_delta;

  exec("log > MyValues.log");
  printf("*** dbg_remaining_times[]\n");
  for (idx = 0; idx < 100; idx++) {
    printf ("%d\n", dbg_remaining_times[idx]);
  }
  printf("*** dbg_sleep_times[]\n");
  for (idx = 0; idx < 100; idx++) {
    printf ("%d\n", dbg_sleep_times[idx]);
  }
  printf("*** dbg_check_times[]\n");
  for (idx = 0; idx < 100; idx++) {
    printf ("%d\n", dbg_check_times[idx]);
  }
  printf("\n\n==== RESULTS ====\n");
  min_delta = 0xffffffff;
  printf("delta max\n");
  for (idx = 0; idx < 100; idx++) {
    int result;
    if (dbg_remaining_times[idx] < 170)
      result = 625 + dbg_remaining_times[idx] - 170;
    else
      result = dbg_remaining_times[idx] - 170;
    if (min_delta > result) min_delta = result;
    printf ("%d\n", result);
  }
  printf("delta min\n");
  for (idx = 0; idx < 100; idx++) {
    int result;
    if (dbg_remaining_times[idx] < 400)
      result = 625 + dbg_remaining_times[idx] - 400;
    else
      result = dbg_remaining_times[idx] - 400;
    if (min_delta > result) min_delta = result;
    printf ("%d\n", result);
  }  
  printf("mininum logged delta: %d\n", min_delta);
  printf("SLP remaining time\n");
  for (idx = 0; idx < 100; idx++) {
    printf ("%d\n", dbg_slp_rem[idx]);
  }  
  printf("minimum logged SLP rem time: %d\n", dbg_slp_rem_min);
  printf("maximum logged SLP rem time: %d\n", dbg_slp_rem_max);
  printf("SLP hit to clk compensation progr delay: %d\n", dbg_slp_rem_diff_min);
  exec("log off");
} //displayvalues() ends